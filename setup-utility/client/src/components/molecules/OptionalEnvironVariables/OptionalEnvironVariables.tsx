import { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { HiArrowUpRight } from 'react-icons/hi2';
import { setEnvironVariables } from '@services/env/slice';
import Input from '@components/atoms/Input';
import './OptionalEnvironVariables.css';

const OptionalEnvironVariables = () => {
    const [isActive, setIsActive] = useState(false);
    const dispatch = useDispatch();
    const { environVariables } = useSelector((state: any) => state.env);

    const handleInputChange = (name: string, value: string) => {
        dispatch(setEnvironVariables({ ...environVariables, [name]: value }));
    };

    return (
        <div className='Optional-Environ-Variables-Container'>
            <div className='Optional-Environ-Variables-Header' onClick={() => setIsActive(!isActive)}>
                <h3 className='Optional-Environ-Variables-Title'>Optional</h3>
                <i className='Icon-Container'>
                    <HiArrowUpRight />
                </i>
            </div>

            {isActive && (
                <div className='Optional-Environ-Variables-Content'>
                    <Input
                        type='text'
                        value={environVariables.CLIENT_WEB_APP_PORT || ''}
                        onChange={(e) => handleInputChange('CLIENT_WEB_APP_PORT', e.target.value)}
                        placeholder='CLIENT_WEB_APP_PORT (default: 5050)'
                        helperText='Port number for the client-side web application. Defaults to 5050 if not specified.'
                    />

                    <Input
                        type='text'
                        value={environVariables.SERVER_PORT || ''}
                        onChange={(e) => handleInputChange('SERVER_PORT', e.target.value)}
                        placeholder='SERVER_PORT (default: 5080)'
                        helperText='Port number for the server. Defaults to 5080 if not specified.'
                    />

                    <Input
                        type='text'
                        value={environVariables.MONGO_DB_PORT || ''}
                        onChange={(e) => handleInputChange('MONGO_DB_PORT', e.target.value)}
                        placeholder='MONGO_DB_PORT (default: 27020)'
                        helperText='Port number for the MongoDB database. Defaults to 27020 if not specified.'
                    />

                    <Input
                        type='text'
                        value={environVariables.MONGO_DB_USER || ''}
                        onChange={(e) => handleInputChange('MONGO_DB_USER', e.target.value)}
                        placeholder='MONGO_DB_USER (default: root)'
                        helperText='Username for the MongoDB database. This field is optional when deploying with Docker. Only required if connecting to a custom MongoDB instance.'
                    />

                    <Input
                        type='password'
                        value={environVariables.MONGO_DB_PASSWORD || ''}
                        onChange={(e) => handleInputChange('MONGO_DB_PASSWORD', e.target.value)}
                        placeholder='MONGO_DB_PASSWORD (autogenerated)'
                        helperText='Password for the MongoDB database. This field is optional when deploying with Docker. Only required if connecting to a custom MongoDB instance.'
                    />

                    <Input
                        type='text'
                        value={environVariables.CORS_ORIGIN || ''}
                        onChange={(e) => handleInputChange('CORS_ORIGIN', e.target.value)}
                        placeholder='CORS_ORIGIN (default: *)'
                        helperText='Allowed origins for Cross-Origin Resource Sharing (CORS). Defaults to "*" to allow all origins.'
                    />

                    <Input
                        type='text'
                        value={environVariables.PRODUCTION_DATABASE || ''}
                        onChange={(e) => handleInputChange('PRODUCTION_DATABASE', e.target.value)}
                        placeholder='PRODUCTION_DATABASE (default: quantumcloud@production)'
                        helperText='Name of the production database. Defaults to "quantumcloud@production" if not specified.'
                    />

                    <Input
                        type='text'
                        value={environVariables.REGISTRATION_DISABLED || false}
                        onChange={(e) => handleInputChange('REGISTRATION_DISABLED', String(e.target.checked))}
                        helperText='Disable user registration functionality (default: false).'
                    />

                    <Input
                        type='text'
                        value={environVariables.SMTP_HOST || ''}
                        onChange={(e) => handleInputChange('SMTP_HOST', e.target.value)}
                        placeholder='SMTP_HOST (e.g., smtp.gmail.com)'
                        helperText='Hostname of the SMTP server used for sending emails. Example: "smtp.gmail.com".'
                    />

                    <Input
                        type='number'
                        value={environVariables.SMTP_PORT || ''}
                        onChange={(e) => handleInputChange('SMTP_PORT', e.target.value)}
                        placeholder='SMTP_PORT (e.g., 587 for TLS)'
                        helperText='Port number of the SMTP server. Common values include 587 for TLS and 465 for SSL.'
                    />

                    <Input
                        type='text'
                        value={environVariables.SMTP_USER || ''}
                        onChange={(e) => handleInputChange('SMTP_USER', e.target.value)}
                        placeholder='SMTP_USER (e.g., no-reply@quantumapp.com)'
                        helperText='Username for authenticating with the SMTP server. Example: "no-reply@quantumapp.com".'
                    />

                    <Input
                        type='password'
                        value={environVariables.SMTP_PASSWORD || ''}
                        onChange={(e) => handleInputChange('SMTP_PASSWORD', e.target.value)}
                        placeholder='SMTP_PASSWORD (e.g., password123)'
                        helperText='Password for authenticating with the SMTP server. Ensure this is kept secure.'
                    />

                    <Input
                        type='email'
                        value={environVariables.WEBMASTER_EMAIL || ''}
                        onChange={(e) => handleInputChange('WEBMASTER_EMAIL', e.target.value)}
                        placeholder='WEBMASTER_EMAIL (e.g., it-guy@quantumapp.com)'
                        helperText='Email address of the webmaster to receive error notifications and other important communications.'
                    />
                </div>
            )}
        </div>
    );
};

export default OptionalEnvironVariables;