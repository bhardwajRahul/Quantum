import React, { useState, useCallback } from 'react';
import { useDispatch } from 'react-redux';
import { useMutation } from 'react-query';
import { setEnvironVariables } from '@services/env/slice';
import Loader from '@components/atoms/Loader';
import StepContainer from '@components/atoms/StepContainer';
import StepsContainer from '@components/molecules/StepsContainer';
import Button from '@components/atoms/Button';
import DeployOutput from '@components/molecules/DeployOutput';
import OptionalEnvironVariables from '@components/molecules/OptionalEnvironVariables';
import EnvironVariables from '@components/molecules/EnvironVariables';
import useEnvironVariables from '@hooks/useEnvironVariables';
import { updateEnvVariables } from '@services/env/api';
import './Setup.css';

const steps = [
    'Getting Started',
    'Configuring Domains',
    'Connecting to GitHub',
    'Secret Keys (autogenerated)'
];

const SetupPage: React.FC = () => {
    const dispatch = useDispatch();
    const { environVariables, isLoading } = useEnvironVariables();
    const [isFormSubmitted, setIsFormSubmitted] = useState(false); 

    const { mutate, isLoading: isMutating } = useMutation(updateEnvVariables, {
        onSuccess: (data) => {
            console.log('Variables updated successfully:', data);
            setIsFormSubmitted(true);
            dispatch(setEnvironVariables(data));
        },
        onError: (error) => {
            console.error('Error updating variables:', error);
        }
    });

    const handleFormSubmit = useCallback((event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (environVariables) {
            mutate(environVariables);
        }
    }, [environVariables, mutate]);

    return (
        <main id='Setup-Utility-Main'>
            <section className='Setup-Utility-Left-Container'>
                <StepsContainer>
                    {steps.map((title, index) => (
                        <StepContainer key={index} title={title} />
                    ))}
                </StepsContainer>
            </section>

            <section 
                className='Setup-Utility-Container'
                data-isformsubmitted={isFormSubmitted}
            >
                <h3 className='Setup-Utility-Header-Title'>Deploying your Quantum instance.</h3>

                <form className='Setup-Utility-Form-Container' onSubmit={handleFormSubmit}>
                    {isLoading ? (
                        <Loader scale={0.5} />
                    ) : (
                        <>
                            <EnvironVariables />
                            <OptionalEnvironVariables />
                            {isMutating ? (
                                <Loader scale={0.5} />
                            ) : (
                                <Button text='Deploy' />
                            )}
                        </>
                    )}
                </form>
            </section>
                
            <DeployOutput />
        </main>
    );
};

export default SetupPage;
